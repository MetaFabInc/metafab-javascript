/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchMintCollectionItemsRequest from '../model/BatchMintCollectionItemsRequest';
import BatchTransferCollectionItemsRequest from '../model/BatchTransferCollectionItemsRequest';
import BurnCollectionItemRequest from '../model/BurnCollectionItemRequest';
import CreateCollection200Response from '../model/CreateCollection200Response';
import CreateCollectionItemRequest from '../model/CreateCollectionItemRequest';
import CreateCollectionRequest from '../model/CreateCollectionRequest';
import GetCollections200ResponseInner from '../model/GetCollections200ResponseInner';
import GrantCollectionRoleRequest from '../model/GrantCollectionRoleRequest';
import MintCollectionItemRequest from '../model/MintCollectionItemRequest';
import RevokeCollectionRoleRequest from '../model/RevokeCollectionRoleRequest';
import SetCollectionApprovalRequest from '../model/SetCollectionApprovalRequest';
import SetCollectionItemTimelockRequest from '../model/SetCollectionItemTimelockRequest';
import TransactionModel from '../model/TransactionModel';
import TransferCollectionItemRequest from '../model/TransferCollectionItemRequest';

/**
* Items service.
* @module api/ItemsApi
* @version 1.4.0
*/
export default class ItemsApi {

    /**
    * Constructs a new ItemsApi. 
    * @alias module:api/ItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Batch mint collection items
     * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/BatchMintCollectionItemsRequest} batchMintCollectionItemsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    batchMintCollectionItemsWithHttpInfo(collectionId, xAuthorization, xPassword, batchMintCollectionItemsRequest) {
      let postBody = batchMintCollectionItemsRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling batchMintCollectionItems");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling batchMintCollectionItems");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling batchMintCollectionItems");
      }
      // verify the required parameter 'batchMintCollectionItemsRequest' is set
      if (batchMintCollectionItemsRequest === undefined || batchMintCollectionItemsRequest === null) {
        throw new Error("Missing the required parameter 'batchMintCollectionItemsRequest' when calling batchMintCollectionItems");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/batchMints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch mint collection items
     * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/BatchMintCollectionItemsRequest} batchMintCollectionItemsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    batchMintCollectionItems(collectionId, xAuthorization, xPassword, batchMintCollectionItemsRequest) {
      return this.batchMintCollectionItemsWithHttpInfo(collectionId, xAuthorization, xPassword, batchMintCollectionItemsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch transfer collection items
     * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BatchTransferCollectionItemsRequest} batchTransferCollectionItemsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    batchTransferCollectionItemsWithHttpInfo(collectionId, xAuthorization, xPassword, batchTransferCollectionItemsRequest) {
      let postBody = batchTransferCollectionItemsRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling batchTransferCollectionItems");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling batchTransferCollectionItems");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling batchTransferCollectionItems");
      }
      // verify the required parameter 'batchTransferCollectionItemsRequest' is set
      if (batchTransferCollectionItemsRequest === undefined || batchTransferCollectionItemsRequest === null) {
        throw new Error("Missing the required parameter 'batchTransferCollectionItemsRequest' when calling batchTransferCollectionItems");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/batchTransfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch transfer collection items
     * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BatchTransferCollectionItemsRequest} batchTransferCollectionItemsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    batchTransferCollectionItems(collectionId, xAuthorization, xPassword, batchTransferCollectionItemsRequest) {
      return this.batchTransferCollectionItemsWithHttpInfo(collectionId, xAuthorization, xPassword, batchTransferCollectionItemsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Burn collection item
     * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BurnCollectionItemRequest} burnCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    burnCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, burnCollectionItemRequest) {
      let postBody = burnCollectionItemRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling burnCollectionItem");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling burnCollectionItem");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling burnCollectionItem");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling burnCollectionItem");
      }
      // verify the required parameter 'burnCollectionItemRequest' is set
      if (burnCollectionItemRequest === undefined || burnCollectionItemRequest === null) {
        throw new Error("Missing the required parameter 'burnCollectionItemRequest' when calling burnCollectionItem");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/burns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Burn collection item
     * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BurnCollectionItemRequest} burnCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    burnCollectionItem(collectionId, collectionItemId, xAuthorization, xPassword, burnCollectionItemRequest) {
      return this.burnCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, burnCollectionItemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create collection
     * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/CreateCollectionRequest} createCollectionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCollection200Response} and HTTP response
     */
    createCollectionWithHttpInfo(xAuthorization, xPassword, createCollectionRequest) {
      let postBody = createCollectionRequest;
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling createCollection");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling createCollection");
      }
      // verify the required parameter 'createCollectionRequest' is set
      if (createCollectionRequest === undefined || createCollectionRequest === null) {
        throw new Error("Missing the required parameter 'createCollectionRequest' when calling createCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCollection200Response;
      return this.apiClient.callApi(
        '/v1/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create collection
     * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/CreateCollectionRequest} createCollectionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCollection200Response}
     */
    createCollection(xAuthorization, xPassword, createCollectionRequest) {
      return this.createCollectionWithHttpInfo(xAuthorization, xPassword, createCollectionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create collection item
     * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/CreateCollectionItemRequest} createCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    createCollectionItemWithHttpInfo(collectionId, xAuthorization, xPassword, createCollectionItemRequest) {
      let postBody = createCollectionItemRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling createCollectionItem");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling createCollectionItem");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling createCollectionItem");
      }
      // verify the required parameter 'createCollectionItemRequest' is set
      if (createCollectionItemRequest === undefined || createCollectionItemRequest === null) {
        throw new Error("Missing the required parameter 'createCollectionItemRequest' when calling createCollectionItem");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create collection item
     * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/CreateCollectionItemRequest} createCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    createCollectionItem(collectionId, xAuthorization, xPassword, createCollectionItemRequest) {
      return this.createCollectionItemWithHttpInfo(collectionId, xAuthorization, xPassword, createCollectionItemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection approval
     * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} operatorAddress A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    getCollectionApprovalWithHttpInfo(collectionId, operatorAddress, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionApproval");
      }
      // verify the required parameter 'operatorAddress' is set
      if (operatorAddress === undefined || operatorAddress === null) {
        throw new Error("Missing the required parameter 'operatorAddress' when calling getCollectionApproval");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'operatorAddress': operatorAddress,
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/approvals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection approval
     * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} operatorAddress A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    getCollectionApproval(collectionId, operatorAddress, opts) {
      return this.getCollectionApprovalWithHttpInfo(collectionId, operatorAddress, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection item
     * Returns a metadata object for the provided collectionItemId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCollectionItemWithHttpInfo(collectionId, collectionItemId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItem");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling getCollectionItem");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection item
     * Returns a metadata object for the provided collectionItemId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCollectionItem(collectionId, collectionItemId) {
      return this.getCollectionItemWithHttpInfo(collectionId, collectionItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection item balance
     * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getCollectionItemBalanceWithHttpInfo(collectionId, collectionItemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItemBalance");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling getCollectionItemBalance");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection item balance
     * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getCollectionItemBalance(collectionId, collectionItemId, opts) {
      return this.getCollectionItemBalanceWithHttpInfo(collectionId, collectionItemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection item balances
     * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Number}>} and HTTP response
     */
    getCollectionItemBalancesWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItemBalances");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection item balances
     * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Number}>}
     */
    getCollectionItemBalances(collectionId, opts) {
      return this.getCollectionItemBalancesWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection item supplies
     * Returns the currency circulating supply of all collection items.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Number}>} and HTTP response
     */
    getCollectionItemSuppliesWithHttpInfo(collectionId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItemSupplies");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/supplies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection item supplies
     * Returns the currency circulating supply of all collection items.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Number}>}
     */
    getCollectionItemSupplies(collectionId) {
      return this.getCollectionItemSuppliesWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection item supply
     * Returns the current circulating supply of the provided collectionItemId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getCollectionItemSupplyWithHttpInfo(collectionId, collectionItemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItemSupply");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling getCollectionItemSupply");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/supplies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection item supply
     * Returns the current circulating supply of the provided collectionItemId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getCollectionItemSupply(collectionId, collectionItemId, opts) {
      return this.getCollectionItemSupplyWithHttpInfo(collectionId, collectionItemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection item timelock
     * Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItemTimelock");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling getCollectionItemTimelock");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/timelocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection item timelock
     * Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getCollectionItemTimelock(collectionId, collectionItemId) {
      return this.getCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection items
     * Returns all collection items as an array of metadata objects.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    getCollectionItemsWithHttpInfo(collectionId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItems");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection items
     * Returns all collection items as an array of metadata objects.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    getCollectionItems(collectionId) {
      return this.getCollectionItemsWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection role
     * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} role A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    getCollectionRoleWithHttpInfo(collectionId, role, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionRole");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling getCollectionRole");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'role': role,
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection role
     * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} role A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    getCollectionRole(collectionId, role, opts) {
      return this.getCollectionRoleWithHttpInfo(collectionId, role, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collections
     * Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetCollections200ResponseInner>} and HTTP response
     */
    getCollectionsWithHttpInfo(xGameKey) {
      let postBody = null;
      // verify the required parameter 'xGameKey' is set
      if (xGameKey === undefined || xGameKey === null) {
        throw new Error("Missing the required parameter 'xGameKey' when calling getCollections");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Game-Key': xGameKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCollections200ResponseInner];
      return this.apiClient.callApi(
        '/v1/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collections
     * Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetCollections200ResponseInner>}
     */
    getCollections(xGameKey) {
      return this.getCollectionsWithHttpInfo(xGameKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Grant collection role
     * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/GrantCollectionRoleRequest} grantCollectionRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    grantCollectionRoleWithHttpInfo(collectionId, xAuthorization, xPassword, grantCollectionRoleRequest) {
      let postBody = grantCollectionRoleRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling grantCollectionRole");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling grantCollectionRole");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling grantCollectionRole");
      }
      // verify the required parameter 'grantCollectionRoleRequest' is set
      if (grantCollectionRoleRequest === undefined || grantCollectionRoleRequest === null) {
        throw new Error("Missing the required parameter 'grantCollectionRoleRequest' when calling grantCollectionRole");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Grant collection role
     * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/GrantCollectionRoleRequest} grantCollectionRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    grantCollectionRole(collectionId, xAuthorization, xPassword, grantCollectionRoleRequest) {
      return this.grantCollectionRoleWithHttpInfo(collectionId, xAuthorization, xPassword, grantCollectionRoleRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mint collection item
     * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/MintCollectionItemRequest} mintCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    mintCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, mintCollectionItemRequest) {
      let postBody = mintCollectionItemRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling mintCollectionItem");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling mintCollectionItem");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling mintCollectionItem");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling mintCollectionItem");
      }
      // verify the required parameter 'mintCollectionItemRequest' is set
      if (mintCollectionItemRequest === undefined || mintCollectionItemRequest === null) {
        throw new Error("Missing the required parameter 'mintCollectionItemRequest' when calling mintCollectionItem");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/mints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mint collection item
     * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/MintCollectionItemRequest} mintCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    mintCollectionItem(collectionId, collectionItemId, xAuthorization, xPassword, mintCollectionItemRequest) {
      return this.mintCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, mintCollectionItemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke collection role
     * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/RevokeCollectionRoleRequest} revokeCollectionRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    revokeCollectionRoleWithHttpInfo(collectionId, xAuthorization, xPassword, revokeCollectionRoleRequest) {
      let postBody = revokeCollectionRoleRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling revokeCollectionRole");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling revokeCollectionRole");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling revokeCollectionRole");
      }
      // verify the required parameter 'revokeCollectionRoleRequest' is set
      if (revokeCollectionRoleRequest === undefined || revokeCollectionRoleRequest === null) {
        throw new Error("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCollectionRole");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke collection role
     * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/RevokeCollectionRoleRequest} revokeCollectionRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    revokeCollectionRole(collectionId, xAuthorization, xPassword, revokeCollectionRoleRequest) {
      return this.revokeCollectionRoleWithHttpInfo(collectionId, xAuthorization, xPassword, revokeCollectionRoleRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set collection approval
     * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/SetCollectionApprovalRequest} setCollectionApprovalRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    setCollectionApprovalWithHttpInfo(collectionId, xAuthorization, xPassword, setCollectionApprovalRequest) {
      let postBody = setCollectionApprovalRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling setCollectionApproval");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling setCollectionApproval");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling setCollectionApproval");
      }
      // verify the required parameter 'setCollectionApprovalRequest' is set
      if (setCollectionApprovalRequest === undefined || setCollectionApprovalRequest === null) {
        throw new Error("Missing the required parameter 'setCollectionApprovalRequest' when calling setCollectionApproval");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/approvals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set collection approval
     * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/SetCollectionApprovalRequest} setCollectionApprovalRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    setCollectionApproval(collectionId, xAuthorization, xPassword, setCollectionApprovalRequest) {
      return this.setCollectionApprovalWithHttpInfo(collectionId, xAuthorization, xPassword, setCollectionApprovalRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set collection item timelock
     * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/SetCollectionItemTimelockRequest} setCollectionItemTimelockRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    setCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, setCollectionItemTimelockRequest) {
      let postBody = setCollectionItemTimelockRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling setCollectionItemTimelock");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling setCollectionItemTimelock");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling setCollectionItemTimelock");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling setCollectionItemTimelock");
      }
      // verify the required parameter 'setCollectionItemTimelockRequest' is set
      if (setCollectionItemTimelockRequest === undefined || setCollectionItemTimelockRequest === null) {
        throw new Error("Missing the required parameter 'setCollectionItemTimelockRequest' when calling setCollectionItemTimelock");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/timelocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set collection item timelock
     * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/SetCollectionItemTimelockRequest} setCollectionItemTimelockRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    setCollectionItemTimelock(collectionId, collectionItemId, xAuthorization, xPassword, setCollectionItemTimelockRequest) {
      return this.setCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, setCollectionItemTimelockRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer collection item
     * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/TransferCollectionItemRequest} transferCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    transferCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, transferCollectionItemRequest) {
      let postBody = transferCollectionItemRequest;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling transferCollectionItem");
      }
      // verify the required parameter 'collectionItemId' is set
      if (collectionItemId === undefined || collectionItemId === null) {
        throw new Error("Missing the required parameter 'collectionItemId' when calling transferCollectionItem");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling transferCollectionItem");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling transferCollectionItem");
      }
      // verify the required parameter 'transferCollectionItemRequest' is set
      if (transferCollectionItemRequest === undefined || transferCollectionItemRequest === null) {
        throw new Error("Missing the required parameter 'transferCollectionItemRequest' when calling transferCollectionItem");
      }

      let pathParams = {
        'collectionId': collectionId,
        'collectionItemId': collectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items/{collectionItemId}/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Transfer collection item
     * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} collectionId Any collection id within the MetaFab ecosystem.
     * @param {Number} collectionItemId Any item id for the collection. Zero, or a positive integer.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/TransferCollectionItemRequest} transferCollectionItemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    transferCollectionItem(collectionId, collectionItemId, xAuthorization, xPassword, transferCollectionItemRequest) {
      return this.transferCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, transferCollectionItemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
