/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchTransferCurrencyRequest from '../model/BatchTransferCurrencyRequest';
import BurnCurrencyRequest from '../model/BurnCurrencyRequest';
import CreateCurrency200Response from '../model/CreateCurrency200Response';
import CreateCurrencyRequest from '../model/CreateCurrencyRequest';
import GetCurrencies200ResponseInner from '../model/GetCurrencies200ResponseInner';
import GetCurrencyFees200Response from '../model/GetCurrencyFees200Response';
import GrantCurrencyRoleRequest from '../model/GrantCurrencyRoleRequest';
import MintCurrencyRequest from '../model/MintCurrencyRequest';
import RevokeCollectionRoleRequest from '../model/RevokeCollectionRoleRequest';
import SetCurrencyFeesRequest from '../model/SetCurrencyFeesRequest';
import TransactionModel from '../model/TransactionModel';
import TransferCurrencyRequest from '../model/TransferCurrencyRequest';

/**
* Currencies service.
* @module api/CurrenciesApi
* @version 1.1.4
*/
export default class CurrenciesApi {

    /**
    * Constructs a new CurrenciesApi. 
    * @alias module:api/CurrenciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Batch transfer currency
     * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BatchTransferCurrencyRequest} batchTransferCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    batchTransferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest) {
      let postBody = batchTransferCurrencyRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling batchTransferCurrency");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling batchTransferCurrency");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling batchTransferCurrency");
      }
      // verify the required parameter 'batchTransferCurrencyRequest' is set
      if (batchTransferCurrencyRequest === undefined || batchTransferCurrencyRequest === null) {
        throw new Error("Missing the required parameter 'batchTransferCurrencyRequest' when calling batchTransferCurrency");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/batchTransfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch transfer currency
     * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BatchTransferCurrencyRequest} batchTransferCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    batchTransferCurrency(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest) {
      return this.batchTransferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Burn currency
     * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BurnCurrencyRequest} burnCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    burnCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, burnCurrencyRequest) {
      let postBody = burnCurrencyRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling burnCurrency");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling burnCurrency");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling burnCurrency");
      }
      // verify the required parameter 'burnCurrencyRequest' is set
      if (burnCurrencyRequest === undefined || burnCurrencyRequest === null) {
        throw new Error("Missing the required parameter 'burnCurrencyRequest' when calling burnCurrency");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/burns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Burn currency
     * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/BurnCurrencyRequest} burnCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    burnCurrency(currencyId, xAuthorization, xPassword, burnCurrencyRequest) {
      return this.burnCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, burnCurrencyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create currency
     * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/CreateCurrencyRequest} createCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCurrency200Response} and HTTP response
     */
    createCurrencyWithHttpInfo(xAuthorization, xPassword, createCurrencyRequest) {
      let postBody = createCurrencyRequest;
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling createCurrency");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling createCurrency");
      }
      // verify the required parameter 'createCurrencyRequest' is set
      if (createCurrencyRequest === undefined || createCurrencyRequest === null) {
        throw new Error("Missing the required parameter 'createCurrencyRequest' when calling createCurrency");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCurrency200Response;
      return this.apiClient.callApi(
        '/v1/currencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create currency
     * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/CreateCurrencyRequest} createCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCurrency200Response}
     */
    createCurrency(xAuthorization, xPassword, createCurrencyRequest) {
      return this.createCurrencyWithHttpInfo(xAuthorization, xPassword, createCurrencyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get currencies
     * Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetCurrencies200ResponseInner>} and HTTP response
     */
    getCurrenciesWithHttpInfo(xGameKey) {
      let postBody = null;
      // verify the required parameter 'xGameKey' is set
      if (xGameKey === undefined || xGameKey === null) {
        throw new Error("Missing the required parameter 'xGameKey' when calling getCurrencies");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Game-Key': xGameKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCurrencies200ResponseInner];
      return this.apiClient.callApi(
        '/v1/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get currencies
     * Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetCurrencies200ResponseInner>}
     */
    getCurrencies(xGameKey) {
      return this.getCurrenciesWithHttpInfo(xGameKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get currency balance
     * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getCurrencyBalanceWithHttpInfo(currencyId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling getCurrencyBalance");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get currency balance
     * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getCurrencyBalance(currencyId, opts) {
      return this.getCurrencyBalanceWithHttpInfo(currencyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get currency fees
     * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCurrencyFees200Response} and HTTP response
     */
    getCurrencyFeesWithHttpInfo(currencyId) {
      let postBody = null;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling getCurrencyFees");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCurrencyFees200Response;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/fees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get currency fees
     * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCurrencyFees200Response}
     */
    getCurrencyFees(currencyId) {
      return this.getCurrencyFeesWithHttpInfo(currencyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get currency role
     * Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} role A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    getCurrencyRoleWithHttpInfo(currencyId, role, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling getCurrencyRole");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling getCurrencyRole");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
        'role': role,
        'address': opts['address'],
        'walletId': opts['walletId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get currency role
     * Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} role A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`
     * @param {Object} opts Optional parameters
     * @param {String} opts.address A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @param {String} opts.walletId Any wallet id within the MetaFab ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    getCurrencyRole(currencyId, role, opts) {
      return this.getCurrencyRoleWithHttpInfo(currencyId, role, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Grant currency role
     * Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/GrantCurrencyRoleRequest} grantCurrencyRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    grantCurrencyRoleWithHttpInfo(currencyId, xAuthorization, xPassword, grantCurrencyRoleRequest) {
      let postBody = grantCurrencyRoleRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling grantCurrencyRole");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling grantCurrencyRole");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling grantCurrencyRole");
      }
      // verify the required parameter 'grantCurrencyRoleRequest' is set
      if (grantCurrencyRoleRequest === undefined || grantCurrencyRoleRequest === null) {
        throw new Error("Missing the required parameter 'grantCurrencyRoleRequest' when calling grantCurrencyRole");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Grant currency role
     * Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/GrantCurrencyRoleRequest} grantCurrencyRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    grantCurrencyRole(currencyId, xAuthorization, xPassword, grantCurrencyRoleRequest) {
      return this.grantCurrencyRoleWithHttpInfo(currencyId, xAuthorization, xPassword, grantCurrencyRoleRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mint currency
     * Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/MintCurrencyRequest} mintCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    mintCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, mintCurrencyRequest) {
      let postBody = mintCurrencyRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling mintCurrency");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling mintCurrency");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling mintCurrency");
      }
      // verify the required parameter 'mintCurrencyRequest' is set
      if (mintCurrencyRequest === undefined || mintCurrencyRequest === null) {
        throw new Error("Missing the required parameter 'mintCurrencyRequest' when calling mintCurrency");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/mints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mint currency
     * Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/MintCurrencyRequest} mintCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    mintCurrency(currencyId, xAuthorization, xPassword, mintCurrencyRequest) {
      return this.mintCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, mintCurrencyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke currency role
     * Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/RevokeCollectionRoleRequest} revokeCollectionRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    revokeCurrencyRoleWithHttpInfo(currencyId, xAuthorization, xPassword, revokeCollectionRoleRequest) {
      let postBody = revokeCollectionRoleRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling revokeCurrencyRole");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling revokeCurrencyRole");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling revokeCurrencyRole");
      }
      // verify the required parameter 'revokeCollectionRoleRequest' is set
      if (revokeCollectionRoleRequest === undefined || revokeCollectionRoleRequest === null) {
        throw new Error("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCurrencyRole");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke currency role
     * Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/RevokeCollectionRoleRequest} revokeCollectionRoleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    revokeCurrencyRole(currencyId, xAuthorization, xPassword, revokeCollectionRoleRequest) {
      return this.revokeCurrencyRoleWithHttpInfo(currencyId, xAuthorization, xPassword, revokeCollectionRoleRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set currency fees
     * Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/SetCurrencyFeesRequest} setCurrencyFeesRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    setCurrencyFeesWithHttpInfo(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest) {
      let postBody = setCurrencyFeesRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling setCurrencyFees");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling setCurrencyFees");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling setCurrencyFees");
      }
      // verify the required parameter 'setCurrencyFeesRequest' is set
      if (setCurrencyFeesRequest === undefined || setCurrencyFeesRequest === null) {
        throw new Error("Missing the required parameter 'setCurrencyFeesRequest' when calling setCurrencyFees");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/fees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set currency fees
     * Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating game.
     * @param {String} xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
     * @param {module:model/SetCurrencyFeesRequest} setCurrencyFeesRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    setCurrencyFees(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest) {
      return this.setCurrencyFeesWithHttpInfo(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer currency
     * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/TransferCurrencyRequest} transferCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionModel} and HTTP response
     */
    transferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, transferCurrencyRequest) {
      let postBody = transferCurrencyRequest;
      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling transferCurrency");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling transferCurrency");
      }
      // verify the required parameter 'xPassword' is set
      if (xPassword === undefined || xPassword === null) {
        throw new Error("Missing the required parameter 'xPassword' when calling transferCurrency");
      }
      // verify the required parameter 'transferCurrencyRequest' is set
      if (transferCurrencyRequest === undefined || transferCurrencyRequest === null) {
        throw new Error("Missing the required parameter 'transferCurrencyRequest' when calling transferCurrency");
      }

      let pathParams = {
        'currencyId': currencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Password': xPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionModel;
      return this.apiClient.callApi(
        '/v1/currencies/{currencyId}/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Transfer currency
     * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param {String} currencyId Any currency id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `secretKey` of a specific game or the `accessToken` of a specific player.
     * @param {String} xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
     * @param {module:model/TransferCurrencyRequest} transferCurrencyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionModel}
     */
    transferCurrency(currencyId, xAuthorization, xPassword, transferCurrencyRequest) {
      return this.transferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, transferCurrencyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
