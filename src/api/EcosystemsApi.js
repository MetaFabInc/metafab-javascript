/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApproveEcosystemGameRequest from '../model/ApproveEcosystemGameRequest';
import AuthPlayer200Response from '../model/AuthPlayer200Response';
import AuthProfile200Response from '../model/AuthProfile200Response';
import CreateEcosystemRequest from '../model/CreateEcosystemRequest';
import CreateProfilePlayerRequest from '../model/CreateProfilePlayerRequest';
import CreateProfileRequest from '../model/CreateProfileRequest';
import EcosystemModel from '../model/EcosystemModel';
import GetProfileGames200ResponseInner from '../model/GetProfileGames200ResponseInner';
import ProfileModel from '../model/ProfileModel';
import PublicEcosystem from '../model/PublicEcosystem';
import PublicGame from '../model/PublicGame';
import UpdateEcosystemRequest from '../model/UpdateEcosystemRequest';
import UpdateProfilePlayer200Response from '../model/UpdateProfilePlayer200Response';
import UpdateProfilePlayerRequest from '../model/UpdateProfilePlayerRequest';
import UpdateProfileRequest from '../model/UpdateProfileRequest';

/**
* Ecosystems service.
* @module api/EcosystemsApi
* @version 1.5.1
*/
export default class EcosystemsApi {

    /**
    * Constructs a new EcosystemsApi. 
    * @alias module:api/EcosystemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Approve ecosystem game
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * @param {String} ecosystemId The ecosystem id of the authenticating ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating ecosystem.
     * @param {module:model/ApproveEcosystemGameRequest} approveEcosystemGameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    approveEcosystemGameWithHttpInfo(ecosystemId, xAuthorization, approveEcosystemGameRequest) {
      let postBody = approveEcosystemGameRequest;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling approveEcosystemGame");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling approveEcosystemGame");
      }
      // verify the required parameter 'approveEcosystemGameRequest' is set
      if (approveEcosystemGameRequest === undefined || approveEcosystemGameRequest === null) {
        throw new Error("Missing the required parameter 'approveEcosystemGameRequest' when calling approveEcosystemGame");
      }

      let pathParams = {
        'ecosystemId': ecosystemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ecosystems/{ecosystemId}/games', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Approve ecosystem game
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * @param {String} ecosystemId The ecosystem id of the authenticating ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating ecosystem.
     * @param {module:model/ApproveEcosystemGameRequest} approveEcosystemGameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    approveEcosystemGame(ecosystemId, xAuthorization, approveEcosystemGameRequest) {
      return this.approveEcosystemGameWithHttpInfo(ecosystemId, xAuthorization, approveEcosystemGameRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authenticate ecosystem
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcosystemModel} and HTTP response
     */
    authEcosystemWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EcosystemModel;
      return this.apiClient.callApi(
        '/v1/ecosystems/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Authenticate ecosystem
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcosystemModel}
     */
    authEcosystem() {
      return this.authEcosystemWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authenticate profile
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * @param {String} xEcosystemKey The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthProfile200Response} and HTTP response
     */
    authProfileWithHttpInfo(xEcosystemKey) {
      let postBody = null;
      // verify the required parameter 'xEcosystemKey' is set
      if (xEcosystemKey === undefined || xEcosystemKey === null) {
        throw new Error("Missing the required parameter 'xEcosystemKey' when calling authProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Ecosystem-Key': xEcosystemKey
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthProfile200Response;
      return this.apiClient.callApi(
        '/v1/profiles/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Authenticate profile
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * @param {String} xEcosystemKey The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthProfile200Response}
     */
    authProfile(xEcosystemKey) {
      return this.authProfileWithHttpInfo(xEcosystemKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authenticate profile player
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {String} xWalletDecryptKey The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
     * @param {String} xUsername The username of a player.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthPlayer200Response} and HTTP response
     */
    authProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling authProfilePlayer");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling authProfilePlayer");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling authProfilePlayer");
      }
      // verify the required parameter 'xWalletDecryptKey' is set
      if (xWalletDecryptKey === undefined || xWalletDecryptKey === null) {
        throw new Error("Missing the required parameter 'xWalletDecryptKey' when calling authProfilePlayer");
      }
      // verify the required parameter 'xUsername' is set
      if (xUsername === undefined || xUsername === null) {
        throw new Error("Missing the required parameter 'xUsername' when calling authProfilePlayer");
      }

      let pathParams = {
        'profileId': profileId,
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Wallet-Decrypt-Key': xWalletDecryptKey,
        'X-Username': xUsername
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthPlayer200Response;
      return this.apiClient.callApi(
        '/v1/profiles/{profileId}/games/{gameId}/players/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Authenticate profile player
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {String} xWalletDecryptKey The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
     * @param {String} xUsername The username of a player.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthPlayer200Response}
     */
    authProfilePlayer(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername) {
      return this.authProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create ecosystem
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * @param {module:model/CreateEcosystemRequest} createEcosystemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcosystemModel} and HTTP response
     */
    createEcosystemWithHttpInfo(createEcosystemRequest) {
      let postBody = createEcosystemRequest;
      // verify the required parameter 'createEcosystemRequest' is set
      if (createEcosystemRequest === undefined || createEcosystemRequest === null) {
        throw new Error("Missing the required parameter 'createEcosystemRequest' when calling createEcosystem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EcosystemModel;
      return this.apiClient.callApi(
        '/v1/ecosystems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create ecosystem
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * @param {module:model/CreateEcosystemRequest} createEcosystemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcosystemModel}
     */
    createEcosystem(createEcosystemRequest) {
      return this.createEcosystemWithHttpInfo(createEcosystemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create profile
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * @param {String} xEcosystemKey The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc.
     * @param {module:model/CreateProfileRequest} createProfileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthProfile200Response} and HTTP response
     */
    createProfileWithHttpInfo(xEcosystemKey, createProfileRequest) {
      let postBody = createProfileRequest;
      // verify the required parameter 'xEcosystemKey' is set
      if (xEcosystemKey === undefined || xEcosystemKey === null) {
        throw new Error("Missing the required parameter 'xEcosystemKey' when calling createProfile");
      }
      // verify the required parameter 'createProfileRequest' is set
      if (createProfileRequest === undefined || createProfileRequest === null) {
        throw new Error("Missing the required parameter 'createProfileRequest' when calling createProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Ecosystem-Key': xEcosystemKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthProfile200Response;
      return this.apiClient.callApi(
        '/v1/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create profile
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * @param {String} xEcosystemKey The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc.
     * @param {module:model/CreateProfileRequest} createProfileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthProfile200Response}
     */
    createProfile(xEcosystemKey, createProfileRequest) {
      return this.createProfileWithHttpInfo(xEcosystemKey, createProfileRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create profile player
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {String} xWalletDecryptKey The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
     * @param {module:model/CreateProfilePlayerRequest} createProfilePlayerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthPlayer200Response} and HTTP response
     */
    createProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest) {
      let postBody = createProfilePlayerRequest;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling createProfilePlayer");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling createProfilePlayer");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling createProfilePlayer");
      }
      // verify the required parameter 'xWalletDecryptKey' is set
      if (xWalletDecryptKey === undefined || xWalletDecryptKey === null) {
        throw new Error("Missing the required parameter 'xWalletDecryptKey' when calling createProfilePlayer");
      }
      // verify the required parameter 'createProfilePlayerRequest' is set
      if (createProfilePlayerRequest === undefined || createProfilePlayerRequest === null) {
        throw new Error("Missing the required parameter 'createProfilePlayerRequest' when calling createProfilePlayer");
      }

      let pathParams = {
        'profileId': profileId,
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Wallet-Decrypt-Key': xWalletDecryptKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthPlayer200Response;
      return this.apiClient.callApi(
        '/v1/profiles/{profileId}/games/{gameId}/players', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create profile player
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {String} xWalletDecryptKey The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
     * @param {module:model/CreateProfilePlayerRequest} createProfilePlayerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthPlayer200Response}
     */
    createProfilePlayer(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest) {
      return this.createProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get ecosystem
     * Returns a ecosystem object for the provided ecosystem id.
     * @param {String} ecosystemId Any ecosystem id within the MetaFab platform.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PublicEcosystem} and HTTP response
     */
    getEcosystemWithHttpInfo(ecosystemId) {
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling getEcosystem");
      }

      let pathParams = {
        'ecosystemId': ecosystemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicEcosystem;
      return this.apiClient.callApi(
        '/v1/ecosystems/{ecosystemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get ecosystem
     * Returns a ecosystem object for the provided ecosystem id.
     * @param {String} ecosystemId Any ecosystem id within the MetaFab platform.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PublicEcosystem}
     */
    getEcosystem(ecosystemId) {
      return this.getEcosystemWithHttpInfo(ecosystemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get ecosystem game
     * Returns a game object for the provided game id that the ecosystem has approved.
     * @param {String} ecosystemId Any ecosystem id within the MetaFab platform.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PublicGame} and HTTP response
     */
    getEcosystemGameWithHttpInfo(ecosystemId, gameId) {
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling getEcosystemGame");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getEcosystemGame");
      }

      let pathParams = {
        'ecosystemId': ecosystemId,
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicGame;
      return this.apiClient.callApi(
        '/v1/ecosystems/{ecosystemId}/games/{gameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get ecosystem game
     * Returns a game object for the provided game id that the ecosystem has approved.
     * @param {String} ecosystemId Any ecosystem id within the MetaFab platform.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PublicGame}
     */
    getEcosystemGame(ecosystemId, gameId) {
      return this.getEcosystemGameWithHttpInfo(ecosystemId, gameId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get ecosystem games
     * Returns an array of games the ecosystem has approved.
     * @param {String} ecosystemId Any ecosystem id within the MetaFab platform.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PublicGame>} and HTTP response
     */
    getEcosystemGamesWithHttpInfo(ecosystemId) {
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling getEcosystemGames");
      }

      let pathParams = {
        'ecosystemId': ecosystemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicGame];
      return this.apiClient.callApi(
        '/v1/ecosystems/{ecosystemId}/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get ecosystem games
     * Returns an array of games the ecosystem has approved.
     * @param {String} ecosystemId Any ecosystem id within the MetaFab platform.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PublicGame>}
     */
    getEcosystemGames(ecosystemId) {
      return this.getEcosystemGamesWithHttpInfo(ecosystemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get profile game
     * Returns a game this profile has connected player accounts for.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProfileGames200ResponseInner} and HTTP response
     */
    getProfileGameWithHttpInfo(profileId, gameId, xAuthorization) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getProfileGame");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getProfileGame");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling getProfileGame");
      }

      let pathParams = {
        'profileId': profileId,
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileGames200ResponseInner;
      return this.apiClient.callApi(
        '/v1/profiles/{profileId}/games/{gameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get profile game
     * Returns a game this profile has connected player accounts for.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProfileGames200ResponseInner}
     */
    getProfileGame(profileId, gameId, xAuthorization) {
      return this.getProfileGameWithHttpInfo(profileId, gameId, xAuthorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get profile games
     * Returns an array of games the authorized profile has connected player accounts for.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetProfileGames200ResponseInner>} and HTTP response
     */
    getProfileGamesWithHttpInfo(profileId, xAuthorization) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getProfileGames");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling getProfileGames");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetProfileGames200ResponseInner];
      return this.apiClient.callApi(
        '/v1/profiles/{profileId}/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get profile games
     * Returns an array of games the authorized profile has connected player accounts for.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetProfileGames200ResponseInner>}
     */
    getProfileGames(profileId, xAuthorization) {
      return this.getProfileGamesWithHttpInfo(profileId, xAuthorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unapprove ecosystem game
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * @param {String} ecosystemId The ecosystem id of the authenticating ecosystem.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `secretKey` of the authenticating ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unapproveEcosystemGameWithHttpInfo(ecosystemId, gameId, xAuthorization) {
      let postBody = null;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling unapproveEcosystemGame");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling unapproveEcosystemGame");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling unapproveEcosystemGame");
      }

      let pathParams = {
        'ecosystemId': ecosystemId,
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ecosystems/{ecosystemId}/games/{gameId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unapprove ecosystem game
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * @param {String} ecosystemId The ecosystem id of the authenticating ecosystem.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} xAuthorization The `secretKey` of the authenticating ecosystem.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unapproveEcosystemGame(ecosystemId, gameId, xAuthorization) {
      return this.unapproveEcosystemGameWithHttpInfo(ecosystemId, gameId, xAuthorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update ecosystem
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * @param {String} ecosystemId The ecosystem id of the authenticating ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating ecosystem.
     * @param {module:model/UpdateEcosystemRequest} updateEcosystemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcosystemModel} and HTTP response
     */
    updateEcosystemWithHttpInfo(ecosystemId, xAuthorization, updateEcosystemRequest) {
      let postBody = updateEcosystemRequest;
      // verify the required parameter 'ecosystemId' is set
      if (ecosystemId === undefined || ecosystemId === null) {
        throw new Error("Missing the required parameter 'ecosystemId' when calling updateEcosystem");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling updateEcosystem");
      }
      // verify the required parameter 'updateEcosystemRequest' is set
      if (updateEcosystemRequest === undefined || updateEcosystemRequest === null) {
        throw new Error("Missing the required parameter 'updateEcosystemRequest' when calling updateEcosystem");
      }

      let pathParams = {
        'ecosystemId': ecosystemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EcosystemModel;
      return this.apiClient.callApi(
        '/v1/ecosystems/{ecosystemId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update ecosystem
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * @param {String} ecosystemId The ecosystem id of the authenticating ecosystem.
     * @param {String} xAuthorization The `secretKey` of the authenticating ecosystem.
     * @param {module:model/UpdateEcosystemRequest} updateEcosystemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcosystemModel}
     */
    updateEcosystem(ecosystemId, xAuthorization, updateEcosystemRequest) {
      return this.updateEcosystemWithHttpInfo(ecosystemId, xAuthorization, updateEcosystemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update profile
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {module:model/UpdateProfileRequest} updateProfileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProfileModel} and HTTP response
     */
    updateProfileWithHttpInfo(profileId, xAuthorization, updateProfileRequest) {
      let postBody = updateProfileRequest;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateProfile");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling updateProfile");
      }
      // verify the required parameter 'updateProfileRequest' is set
      if (updateProfileRequest === undefined || updateProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateProfileRequest' when calling updateProfile");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProfileModel;
      return this.apiClient.callApi(
        '/v1/profiles/{profileId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update profile
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {module:model/UpdateProfileRequest} updateProfileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProfileModel}
     */
    updateProfile(profileId, xAuthorization, updateProfileRequest) {
      return this.updateProfileWithHttpInfo(profileId, xAuthorization, updateProfileRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update profile player
     * Update various fields specific to a player. Such as changing its permissions.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} playerId Any player id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {String} xWalletDecryptKey The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
     * @param {module:model/UpdateProfilePlayerRequest} updateProfilePlayerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateProfilePlayer200Response} and HTTP response
     */
    updateProfilePlayerWithHttpInfo(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest) {
      let postBody = updateProfilePlayerRequest;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateProfilePlayer");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling updateProfilePlayer");
      }
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling updateProfilePlayer");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling updateProfilePlayer");
      }
      // verify the required parameter 'xWalletDecryptKey' is set
      if (xWalletDecryptKey === undefined || xWalletDecryptKey === null) {
        throw new Error("Missing the required parameter 'xWalletDecryptKey' when calling updateProfilePlayer");
      }
      // verify the required parameter 'updateProfilePlayerRequest' is set
      if (updateProfilePlayerRequest === undefined || updateProfilePlayerRequest === null) {
        throw new Error("Missing the required parameter 'updateProfilePlayerRequest' when calling updateProfilePlayer");
      }

      let pathParams = {
        'profileId': profileId,
        'gameId': gameId,
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization,
        'X-Wallet-Decrypt-Key': xWalletDecryptKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProfilePlayer200Response;
      return this.apiClient.callApi(
        '/v1/profiles/{profileId}/games/{gameId}/players/{playerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update profile player
     * Update various fields specific to a player. Such as changing its permissions.
     * @param {String} profileId The profile id of the authenticating profile.
     * @param {String} gameId Any game id within the MetaFab platform.
     * @param {String} playerId Any player id within the MetaFab platform.
     * @param {String} xAuthorization The `accessToken` of the authenticating profile.
     * @param {String} xWalletDecryptKey The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
     * @param {module:model/UpdateProfilePlayerRequest} updateProfilePlayerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateProfilePlayer200Response}
     */
    updateProfilePlayer(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest) {
      return this.updateProfilePlayerWithHttpInfo(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
