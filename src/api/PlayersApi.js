/**
 * MetaFab API
 * Documentation for the MetaFab API. Complete API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlayerModel from '../model/PlayerModel';
import V1PlayersGet200Response from '../model/V1PlayersGet200Response';
import V1PlayersGetRequest from '../model/V1PlayersGetRequest';
import V1PlayersPlayerIdPatchRequest from '../model/V1PlayersPlayerIdPatchRequest';

/**
* Players service.
* @module api/PlayersApi
* @version 1.0.0
*/
export default class PlayersApi {

    /**
    * Constructs a new PlayersApi. 
    * @alias module:api/PlayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Authenticate player
     * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1PlayersGet200Response} and HTTP response
     */
    v1PlayersGetWithHttpInfo(xGameKey) {
      let postBody = null;
      // verify the required parameter 'xGameKey' is set
      if (xGameKey === undefined || xGameKey === null) {
        throw new Error("Missing the required parameter 'xGameKey' when calling v1PlayersGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Game-Key': xGameKey
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1PlayersGet200Response;
      return this.apiClient.callApi(
        '/v1/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Authenticate player
     * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1PlayersGet200Response}
     */
    v1PlayersGet(xGameKey) {
      return this.v1PlayersGetWithHttpInfo(xGameKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update player
     * Update various fields specific to a player. Such as changing its password and resetting its access token.
     * @param {String} playerId Any player id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `accessToken` of the authenticating player.
     * @param {module:model/V1PlayersPlayerIdPatchRequest} v1PlayersPlayerIdPatchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlayerModel} and HTTP response
     */
    v1PlayersPlayerIdPatchWithHttpInfo(playerId, xAuthorization, v1PlayersPlayerIdPatchRequest) {
      let postBody = v1PlayersPlayerIdPatchRequest;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling v1PlayersPlayerIdPatch");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling v1PlayersPlayerIdPatch");
      }
      // verify the required parameter 'v1PlayersPlayerIdPatchRequest' is set
      if (v1PlayersPlayerIdPatchRequest === undefined || v1PlayersPlayerIdPatchRequest === null) {
        throw new Error("Missing the required parameter 'v1PlayersPlayerIdPatchRequest' when calling v1PlayersPlayerIdPatch");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlayerModel;
      return this.apiClient.callApi(
        '/v1/players/{playerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update player
     * Update various fields specific to a player. Such as changing its password and resetting its access token.
     * @param {String} playerId Any player id within the MetaFab ecosystem.
     * @param {String} xAuthorization The `accessToken` of the authenticating player.
     * @param {module:model/V1PlayersPlayerIdPatchRequest} v1PlayersPlayerIdPatchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlayerModel}
     */
    v1PlayersPlayerIdPatch(playerId, xAuthorization, v1PlayersPlayerIdPatchRequest) {
      return this.v1PlayersPlayerIdPatchWithHttpInfo(playerId, xAuthorization, v1PlayersPlayerIdPatchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create player
     * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @param {module:model/V1PlayersGetRequest} v1PlayersGetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1PlayersGet200Response} and HTTP response
     */
    v1PlayersPostWithHttpInfo(xGameKey, v1PlayersGetRequest) {
      let postBody = v1PlayersGetRequest;
      // verify the required parameter 'xGameKey' is set
      if (xGameKey === undefined || xGameKey === null) {
        throw new Error("Missing the required parameter 'xGameKey' when calling v1PlayersPost");
      }
      // verify the required parameter 'v1PlayersGetRequest' is set
      if (v1PlayersGetRequest === undefined || v1PlayersGetRequest === null) {
        throw new Error("Missing the required parameter 'v1PlayersGetRequest' when calling v1PlayersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Game-Key': xGameKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1PlayersGet200Response;
      return this.apiClient.callApi(
        '/v1/players', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create player
     * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     * @param {String} xGameKey The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.
     * @param {module:model/V1PlayersGetRequest} v1PlayersGetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1PlayersGet200Response}
     */
    v1PlayersPost(xGameKey, v1PlayersGetRequest) {
      return this.v1PlayersPostWithHttpInfo(xGameKey, v1PlayersGetRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
