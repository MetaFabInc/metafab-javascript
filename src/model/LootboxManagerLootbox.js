/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LootboxManagerLootbox model module.
 * @module model/LootboxManagerLootbox
 * @version 1.5.1
 */
class LootboxManagerLootbox {
    /**
     * Constructs a new <code>LootboxManagerLootbox</code>.
     * @alias module:model/LootboxManagerLootbox
     */
    constructor() { 
        
        LootboxManagerLootbox.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LootboxManagerLootbox</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LootboxManagerLootbox} obj Optional instance to populate.
     * @return {module:model/LootboxManagerLootbox} The populated <code>LootboxManagerLootbox</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LootboxManagerLootbox();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inputCollection')) {
                obj['inputCollection'] = ApiClient.convertToType(data['inputCollection'], 'String');
            }
            if (data.hasOwnProperty('inputCollectionItemIds')) {
                obj['inputCollectionItemIds'] = ApiClient.convertToType(data['inputCollectionItemIds'], ['Number']);
            }
            if (data.hasOwnProperty('inputCollectionItemAmounts')) {
                obj['inputCollectionItemAmounts'] = ApiClient.convertToType(data['inputCollectionItemAmounts'], ['Number']);
            }
            if (data.hasOwnProperty('outputCollection')) {
                obj['outputCollection'] = ApiClient.convertToType(data['outputCollection'], 'String');
            }
            if (data.hasOwnProperty('outputCollectionItemIds')) {
                obj['outputCollectionItemIds'] = ApiClient.convertToType(data['outputCollectionItemIds'], ['Number']);
            }
            if (data.hasOwnProperty('outputCollectionItemAmounts')) {
                obj['outputCollectionItemAmounts'] = ApiClient.convertToType(data['outputCollectionItemAmounts'], ['Number']);
            }
            if (data.hasOwnProperty('outputCollectionItemWeights')) {
                obj['outputCollectionItemWeights'] = ApiClient.convertToType(data['outputCollectionItemWeights'], ['Number']);
            }
            if (data.hasOwnProperty('outputTotalItems')) {
                obj['outputTotalItems'] = ApiClient.convertToType(data['outputTotalItems'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdatedAt')) {
                obj['lastUpdatedAt'] = ApiClient.convertToType(data['lastUpdatedAt'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LootboxManagerLootbox</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LootboxManagerLootbox</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['inputCollection'] && !(typeof data['inputCollection'] === 'string' || data['inputCollection'] instanceof String)) {
            throw new Error("Expected the field `inputCollection` to be a primitive type in the JSON string but got " + data['inputCollection']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputCollectionItemIds'])) {
            throw new Error("Expected the field `inputCollectionItemIds` to be an array in the JSON data but got " + data['inputCollectionItemIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputCollectionItemAmounts'])) {
            throw new Error("Expected the field `inputCollectionItemAmounts` to be an array in the JSON data but got " + data['inputCollectionItemAmounts']);
        }
        // ensure the json data is a string
        if (data['outputCollection'] && !(typeof data['outputCollection'] === 'string' || data['outputCollection'] instanceof String)) {
            throw new Error("Expected the field `outputCollection` to be a primitive type in the JSON string but got " + data['outputCollection']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputCollectionItemIds'])) {
            throw new Error("Expected the field `outputCollectionItemIds` to be an array in the JSON data but got " + data['outputCollectionItemIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputCollectionItemAmounts'])) {
            throw new Error("Expected the field `outputCollectionItemAmounts` to be an array in the JSON data but got " + data['outputCollectionItemAmounts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputCollectionItemWeights'])) {
            throw new Error("Expected the field `outputCollectionItemWeights` to be an array in the JSON data but got " + data['outputCollectionItemWeights']);
        }

        return true;
    }


}



/**
 * The id of this lootbox.
 * @member {Number} id
 */
LootboxManagerLootbox.prototype['id'] = undefined;

/**
 * The address of the ERC1155 or MetaFab game items contract for input items required by this lootbox.
 * @member {String} inputCollection
 */
LootboxManagerLootbox.prototype['inputCollection'] = undefined;

/**
 * An array of item ids from the input collection that are required for this lootbox.
 * @member {Array.<Number>} inputCollectionItemIds
 */
LootboxManagerLootbox.prototype['inputCollectionItemIds'] = undefined;

/**
 * An array of amounts for each item id for the input collection that are required to open this lootbox.
 * @member {Array.<Number>} inputCollectionItemAmounts
 */
LootboxManagerLootbox.prototype['inputCollectionItemAmounts'] = undefined;

/**
 * The address of the ERC1155 of MetaFab game items contract for possible output items given by this lootbox.
 * @member {String} outputCollection
 */
LootboxManagerLootbox.prototype['outputCollection'] = undefined;

/**
 * An array of item ids from the output collection that are possibly given by this lootbox.
 * @member {Array.<Number>} outputCollectionItemIds
 */
LootboxManagerLootbox.prototype['outputCollectionItemIds'] = undefined;

/**
 * An array of amounts for each item id for the output collection that are possibly given by this lootbox.
 * @member {Array.<Number>} outputCollectionItemAmounts
 */
LootboxManagerLootbox.prototype['outputCollectionItemAmounts'] = undefined;

/**
 * An array of weights for each item id for the output collection that are possibly given by this lootbox.
 * @member {Array.<Number>} outputCollectionItemWeights
 */
LootboxManagerLootbox.prototype['outputCollectionItemWeights'] = undefined;

/**
 * The number of items randomly selected when this lootbox is opened.
 * @member {Number} outputTotalItems
 */
LootboxManagerLootbox.prototype['outputTotalItems'] = undefined;

/**
 * A unix timestamp in seconds that represents the last time this offer was set or updated.
 * @member {Number} lastUpdatedAt
 */
LootboxManagerLootbox.prototype['lastUpdatedAt'] = undefined;






export default LootboxManagerLootbox;

