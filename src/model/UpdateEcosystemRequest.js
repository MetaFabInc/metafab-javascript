/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateEcosystemRequest model module.
 * @module model/UpdateEcosystemRequest
 * @version 1.5.1
 */
class UpdateEcosystemRequest {
    /**
     * Constructs a new <code>UpdateEcosystemRequest</code>.
     * @alias module:model/UpdateEcosystemRequest
     */
    constructor() { 
        
        UpdateEcosystemRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateEcosystemRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateEcosystemRequest} obj Optional instance to populate.
     * @return {module:model/UpdateEcosystemRequest} The populated <code>UpdateEcosystemRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateEcosystemRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('currentPassword')) {
                obj['currentPassword'] = ApiClient.convertToType(data['currentPassword'], 'String');
            }
            if (data.hasOwnProperty('newPassword')) {
                obj['newPassword'] = ApiClient.convertToType(data['newPassword'], 'String');
            }
            if (data.hasOwnProperty('iconImageBase64')) {
                obj['iconImageBase64'] = ApiClient.convertToType(data['iconImageBase64'], 'String');
            }
            if (data.hasOwnProperty('coverImageBase64')) {
                obj['coverImageBase64'] = ApiClient.convertToType(data['coverImageBase64'], 'String');
            }
            if (data.hasOwnProperty('primaryColorHex')) {
                obj['primaryColorHex'] = ApiClient.convertToType(data['primaryColorHex'], 'String');
            }
            if (data.hasOwnProperty('resetPublishedKey')) {
                obj['resetPublishedKey'] = ApiClient.convertToType(data['resetPublishedKey'], 'Boolean');
            }
            if (data.hasOwnProperty('resetSecretKey')) {
                obj['resetSecretKey'] = ApiClient.convertToType(data['resetSecretKey'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateEcosystemRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateEcosystemRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['currentPassword'] && !(typeof data['currentPassword'] === 'string' || data['currentPassword'] instanceof String)) {
            throw new Error("Expected the field `currentPassword` to be a primitive type in the JSON string but got " + data['currentPassword']);
        }
        // ensure the json data is a string
        if (data['newPassword'] && !(typeof data['newPassword'] === 'string' || data['newPassword'] instanceof String)) {
            throw new Error("Expected the field `newPassword` to be a primitive type in the JSON string but got " + data['newPassword']);
        }
        // ensure the json data is a string
        if (data['iconImageBase64'] && !(typeof data['iconImageBase64'] === 'string' || data['iconImageBase64'] instanceof String)) {
            throw new Error("Expected the field `iconImageBase64` to be a primitive type in the JSON string but got " + data['iconImageBase64']);
        }
        // ensure the json data is a string
        if (data['coverImageBase64'] && !(typeof data['coverImageBase64'] === 'string' || data['coverImageBase64'] instanceof String)) {
            throw new Error("Expected the field `coverImageBase64` to be a primitive type in the JSON string but got " + data['coverImageBase64']);
        }
        // ensure the json data is a string
        if (data['primaryColorHex'] && !(typeof data['primaryColorHex'] === 'string' || data['primaryColorHex'] instanceof String)) {
            throw new Error("Expected the field `primaryColorHex` to be a primitive type in the JSON string but got " + data['primaryColorHex']);
        }

        return true;
    }


}



/**
 * A new name. Replaces the ecosystem's current name.
 * @member {String} name
 */
UpdateEcosystemRequest.prototype['name'] = undefined;

/**
 * A new email address. The ecosystem's old email will no longer be valid for account authentication. `currentPassword` must also be provided.
 * @member {String} email
 */
UpdateEcosystemRequest.prototype['email'] = undefined;

/**
 * The ecosystem's current password. Must be provided if setting `newPassword` or `email`.
 * @member {String} currentPassword
 */
UpdateEcosystemRequest.prototype['currentPassword'] = undefined;

/**
 * A new password. The ecosystem's old password will no longer be valid.
 * @member {String} newPassword
 */
UpdateEcosystemRequest.prototype['newPassword'] = undefined;

/**
 * A base64 string of the icon image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem.
 * @member {String} iconImageBase64
 */
UpdateEcosystemRequest.prototype['iconImageBase64'] = undefined;

/**
 * A base64 string of the cover image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem.
 * @member {String} coverImageBase64
 */
UpdateEcosystemRequest.prototype['coverImageBase64'] = undefined;

/**
 * A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem.
 * @member {String} primaryColorHex
 */
UpdateEcosystemRequest.prototype['primaryColorHex'] = undefined;

/**
 * Revokes the ecosystem's previous published key and returns a new one if true.
 * @member {Boolean} resetPublishedKey
 */
UpdateEcosystemRequest.prototype['resetPublishedKey'] = undefined;

/**
 * Revokes the ecosystem's previous secret key and returns a new on if true.
 * @member {Boolean} resetSecretKey
 */
UpdateEcosystemRequest.prototype['resetSecretKey'] = undefined;






export default UpdateEcosystemRequest;

