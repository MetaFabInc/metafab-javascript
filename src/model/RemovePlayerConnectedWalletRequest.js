/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RemovePlayerConnectedWalletRequest model module.
 * @module model/RemovePlayerConnectedWalletRequest
 * @version 1.5.1
 */
class RemovePlayerConnectedWalletRequest {
    /**
     * Constructs a new <code>RemovePlayerConnectedWalletRequest</code>.
     * @alias module:model/RemovePlayerConnectedWalletRequest
     * @param address {String} The address of the external wallet to remove from a player.
     * @param nonce {Number} Any positive integer that hasn't been used previously to connect or disconnect this external wallet. Must be the same nonce used to generate the `signature`.
     * @param signature {String} A signature string generated by signing a keccak256 hash generated with abiCoder encode arguments of `[ 'bytes32', 'address', 'bool', 'address', 'uint256' ]` and `[ keccak256(gameId), delegate wallet unapproved (player's custodial wallet address), false, external wallet address, any unused nonce number ]`.
     * @param chain {module:model/RemovePlayerConnectedWalletRequest.ChainEnum} The blockchain you want to remove this wallet connection on. If you need to remove it on multiple blockchains, make multiple requests using different `chain` arguments. Support for new blockchains are added over time.
     */
    constructor(address, nonce, signature, chain) { 
        
        RemovePlayerConnectedWalletRequest.initialize(this, address, nonce, signature, chain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, nonce, signature, chain) { 
        obj['address'] = address;
        obj['nonce'] = nonce;
        obj['signature'] = signature;
        obj['chain'] = chain;
    }

    /**
     * Constructs a <code>RemovePlayerConnectedWalletRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemovePlayerConnectedWalletRequest} obj Optional instance to populate.
     * @return {module:model/RemovePlayerConnectedWalletRequest} The populated <code>RemovePlayerConnectedWalletRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemovePlayerConnectedWalletRequest();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('chain')) {
                obj['chain'] = ApiClient.convertToType(data['chain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemovePlayerConnectedWalletRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemovePlayerConnectedWalletRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RemovePlayerConnectedWalletRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['chain'] && !(typeof data['chain'] === 'string' || data['chain'] instanceof String)) {
            throw new Error("Expected the field `chain` to be a primitive type in the JSON string but got " + data['chain']);
        }

        return true;
    }


}

RemovePlayerConnectedWalletRequest.RequiredProperties = ["address", "nonce", "signature", "chain"];

/**
 * The address of the external wallet to remove from a player.
 * @member {String} address
 */
RemovePlayerConnectedWalletRequest.prototype['address'] = undefined;

/**
 * Any positive integer that hasn't been used previously to connect or disconnect this external wallet. Must be the same nonce used to generate the `signature`.
 * @member {Number} nonce
 */
RemovePlayerConnectedWalletRequest.prototype['nonce'] = undefined;

/**
 * A signature string generated by signing a keccak256 hash generated with abiCoder encode arguments of `[ 'bytes32', 'address', 'bool', 'address', 'uint256' ]` and `[ keccak256(gameId), delegate wallet unapproved (player's custodial wallet address), false, external wallet address, any unused nonce number ]`.
 * @member {String} signature
 */
RemovePlayerConnectedWalletRequest.prototype['signature'] = undefined;

/**
 * The blockchain you want to remove this wallet connection on. If you need to remove it on multiple blockchains, make multiple requests using different `chain` arguments. Support for new blockchains are added over time.
 * @member {module:model/RemovePlayerConnectedWalletRequest.ChainEnum} chain
 */
RemovePlayerConnectedWalletRequest.prototype['chain'] = undefined;





/**
 * Allowed values for the <code>chain</code> property.
 * @enum {String}
 * @readonly
 */
RemovePlayerConnectedWalletRequest['ChainEnum'] = {

    /**
     * value: "ARBITRUM"
     * @const
     */
    "ARBITRUM": "ARBITRUM",

    /**
     * value: "ARBITRUMGOERLI"
     * @const
     */
    "ARBITRUMGOERLI": "ARBITRUMGOERLI",

    /**
     * value: "ARBITRUMNOVA"
     * @const
     */
    "ARBITRUMNOVA": "ARBITRUMNOVA",

    /**
     * value: "AVALANCHE"
     * @const
     */
    "AVALANCHE": "AVALANCHE",

    /**
     * value: "AVALANCHEFUJI"
     * @const
     */
    "AVALANCHEFUJI": "AVALANCHEFUJI",

    /**
     * value: "ETHEREUM"
     * @const
     */
    "ETHEREUM": "ETHEREUM",

    /**
     * value: "FANTOM"
     * @const
     */
    "FANTOM": "FANTOM",

    /**
     * value: "FANTOMTEST"
     * @const
     */
    "FANTOMTEST": "FANTOMTEST",

    /**
     * value: "GOERLI"
     * @const
     */
    "GOERLI": "GOERLI",

    /**
     * value: "MATIC"
     * @const
     */
    "MATIC": "MATIC",

    /**
     * value: "MATICMUMBAI"
     * @const
     */
    "MATICMUMBAI": "MATICMUMBAI",

    /**
     * value: "THUNDERCORE"
     * @const
     */
    "THUNDERCORE": "THUNDERCORE",

    /**
     * value: "THUNDERCORETESTNET"
     * @const
     */
    "THUNDERCORETESTNET": "THUNDERCORETESTNET"
};



export default RemovePlayerConnectedWalletRequest;

