/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WithdrawFromShopRequest model module.
 * @module model/WithdrawFromShopRequest
 * @version 1.5.1
 */
class WithdrawFromShopRequest {
    /**
     * Constructs a new <code>WithdrawFromShopRequest</code>.
     * @alias module:model/WithdrawFromShopRequest
     */
    constructor() { 
        
        WithdrawFromShopRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WithdrawFromShopRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WithdrawFromShopRequest} obj Optional instance to populate.
     * @return {module:model/WithdrawFromShopRequest} The populated <code>WithdrawFromShopRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WithdrawFromShopRequest();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('walletId')) {
                obj['walletId'] = ApiClient.convertToType(data['walletId'], 'String');
            }
            if (data.hasOwnProperty('currencyAddress')) {
                obj['currencyAddress'] = ApiClient.convertToType(data['currencyAddress'], 'String');
            }
            if (data.hasOwnProperty('currencyId')) {
                obj['currencyId'] = ApiClient.convertToType(data['currencyId'], 'String');
            }
            if (data.hasOwnProperty('collectionAddress')) {
                obj['collectionAddress'] = ApiClient.convertToType(data['collectionAddress'], 'String');
            }
            if (data.hasOwnProperty('collectionId')) {
                obj['collectionId'] = ApiClient.convertToType(data['collectionId'], 'String');
            }
            if (data.hasOwnProperty('itemIds')) {
                obj['itemIds'] = ApiClient.convertToType(data['itemIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WithdrawFromShopRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WithdrawFromShopRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['walletId'] && !(typeof data['walletId'] === 'string' || data['walletId'] instanceof String)) {
            throw new Error("Expected the field `walletId` to be a primitive type in the JSON string but got " + data['walletId']);
        }
        // ensure the json data is a string
        if (data['currencyAddress'] && !(typeof data['currencyAddress'] === 'string' || data['currencyAddress'] instanceof String)) {
            throw new Error("Expected the field `currencyAddress` to be a primitive type in the JSON string but got " + data['currencyAddress']);
        }
        // ensure the json data is a string
        if (data['currencyId'] && !(typeof data['currencyId'] === 'string' || data['currencyId'] instanceof String)) {
            throw new Error("Expected the field `currencyId` to be a primitive type in the JSON string but got " + data['currencyId']);
        }
        // ensure the json data is a string
        if (data['collectionAddress'] && !(typeof data['collectionAddress'] === 'string' || data['collectionAddress'] instanceof String)) {
            throw new Error("Expected the field `collectionAddress` to be a primitive type in the JSON string but got " + data['collectionAddress']);
        }
        // ensure the json data is a string
        if (data['collectionId'] && !(typeof data['collectionId'] === 'string' || data['collectionId'] instanceof String)) {
            throw new Error("Expected the field `collectionId` to be a primitive type in the JSON string but got " + data['collectionId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemIds'])) {
            throw new Error("Expected the field `itemIds` to be an array in the JSON data but got " + data['itemIds']);
        }

        return true;
    }


}



/**
 * A valid EVM based address to withdraw to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
 * @member {String} address
 */
WithdrawFromShopRequest.prototype['address'] = undefined;

/**
 * Any wallet id within the MetaFab ecosystem to withdraw to.
 * @member {String} walletId
 */
WithdrawFromShopRequest.prototype['walletId'] = undefined;

/**
 * The address of the currency (ERC20) token to withdraw from the shop. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the shop will be withdrawn.
 * @member {String} currencyAddress
 */
WithdrawFromShopRequest.prototype['currencyAddress'] = undefined;

/**
 * A valid MetaFab currency id that represents the currency token to withdraw from the shop. `currencyAddress` or `currencyId` can be provided when withdrawing currency.
 * @member {String} currencyId
 */
WithdrawFromShopRequest.prototype['currencyId'] = undefined;

/**
 * The address of the collection (ERC1155) for the items to withdraw from the shop. If no currencyAddress and no collectionAddress is provided, the native token held by the shop will be withdrawn.
 * @member {String} collectionAddress
 */
WithdrawFromShopRequest.prototype['collectionAddress'] = undefined;

/**
 * A valid MetaFab collection id that represents the collection for the items to withdraw from the shop. `collectionAddress` or `collectionId` can be provided when withdrawing items.
 * @member {String} collectionId
 */
WithdrawFromShopRequest.prototype['collectionId'] = undefined;

/**
 * The specific itemIds of the provided collection to withdraw from the shop.
 * @member {Array.<Number>} itemIds
 */
WithdrawFromShopRequest.prototype['itemIds'] = undefined;






export default WithdrawFromShopRequest;

