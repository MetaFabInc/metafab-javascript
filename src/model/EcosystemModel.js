/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EcosystemModel model module.
 * @module model/EcosystemModel
 * @version 1.5.1
 */
class EcosystemModel {
    /**
     * Constructs a new <code>EcosystemModel</code>.
     * @alias module:model/EcosystemModel
     */
    constructor() { 
        
        EcosystemModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EcosystemModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcosystemModel} obj Optional instance to populate.
     * @return {module:model/EcosystemModel} The populated <code>EcosystemModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcosystemModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('iconImageUrl')) {
                obj['iconImageUrl'] = ApiClient.convertToType(data['iconImageUrl'], 'String');
            }
            if (data.hasOwnProperty('coverImageUrl')) {
                obj['coverImageUrl'] = ApiClient.convertToType(data['coverImageUrl'], 'String');
            }
            if (data.hasOwnProperty('primaryColorHex')) {
                obj['primaryColorHex'] = ApiClient.convertToType(data['primaryColorHex'], 'String');
            }
            if (data.hasOwnProperty('publishedKey')) {
                obj['publishedKey'] = ApiClient.convertToType(data['publishedKey'], 'String');
            }
            if (data.hasOwnProperty('secretKey')) {
                obj['secretKey'] = ApiClient.convertToType(data['secretKey'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcosystemModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcosystemModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['iconImageUrl'] && !(typeof data['iconImageUrl'] === 'string' || data['iconImageUrl'] instanceof String)) {
            throw new Error("Expected the field `iconImageUrl` to be a primitive type in the JSON string but got " + data['iconImageUrl']);
        }
        // ensure the json data is a string
        if (data['coverImageUrl'] && !(typeof data['coverImageUrl'] === 'string' || data['coverImageUrl'] instanceof String)) {
            throw new Error("Expected the field `coverImageUrl` to be a primitive type in the JSON string but got " + data['coverImageUrl']);
        }
        // ensure the json data is a string
        if (data['primaryColorHex'] && !(typeof data['primaryColorHex'] === 'string' || data['primaryColorHex'] instanceof String)) {
            throw new Error("Expected the field `primaryColorHex` to be a primitive type in the JSON string but got " + data['primaryColorHex']);
        }
        // ensure the json data is a string
        if (data['publishedKey'] && !(typeof data['publishedKey'] === 'string' || data['publishedKey'] instanceof String)) {
            throw new Error("Expected the field `publishedKey` to be a primitive type in the JSON string but got " + data['publishedKey']);
        }
        // ensure the json data is a string
        if (data['secretKey'] && !(typeof data['secretKey'] === 'string' || data['secretKey'] instanceof String)) {
            throw new Error("Expected the field `secretKey` to be a primitive type in the JSON string but got " + data['secretKey']);
        }
        // ensure the json data is a string
        if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
            throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }

        return true;
    }


}



/**
 * This field has not had a description added.
 * @member {String} id
 */
EcosystemModel.prototype['id'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} email
 */
EcosystemModel.prototype['email'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} name
 */
EcosystemModel.prototype['name'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} iconImageUrl
 */
EcosystemModel.prototype['iconImageUrl'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} coverImageUrl
 */
EcosystemModel.prototype['coverImageUrl'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} primaryColorHex
 */
EcosystemModel.prototype['primaryColorHex'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} publishedKey
 */
EcosystemModel.prototype['publishedKey'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} secretKey
 */
EcosystemModel.prototype['secretKey'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} updatedAt
 */
EcosystemModel.prototype['updatedAt'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} createdAt
 */
EcosystemModel.prototype['createdAt'] = undefined;






export default EcosystemModel;

