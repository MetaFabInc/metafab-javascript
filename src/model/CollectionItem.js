/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollectionItemAttributesInner from './CollectionItemAttributesInner';

/**
 * The CollectionItem model module.
 * @module model/CollectionItem
 * @version 1.5.1
 */
class CollectionItem {
    /**
     * Constructs a new <code>CollectionItem</code>.
     * @alias module:model/CollectionItem
     */
    constructor() { 
        
        CollectionItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CollectionItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectionItem} obj Optional instance to populate.
     * @return {module:model/CollectionItem} The populated <code>CollectionItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectionItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalUrl')) {
                obj['externalUrl'] = ApiClient.convertToType(data['externalUrl'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [CollectionItemAttributesInner]);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectionItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectionItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalUrl'] && !(typeof data['externalUrl'] === 'string' || data['externalUrl'] instanceof String)) {
            throw new Error("Expected the field `externalUrl` to be a primitive type in the JSON string but got " + data['externalUrl']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                CollectionItemAttributesInner.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * This field has not had a description added.
 * @member {String} id
 */
CollectionItem.prototype['id'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} image
 */
CollectionItem.prototype['image'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} name
 */
CollectionItem.prototype['name'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} description
 */
CollectionItem.prototype['description'] = undefined;

/**
 * This field has not had a description added.
 * @member {String} externalUrl
 */
CollectionItem.prototype['externalUrl'] = undefined;

/**
 * This field has not had a description added.
 * @member {Array.<module:model/CollectionItemAttributesInner>} attributes
 */
CollectionItem.prototype['attributes'] = undefined;

/**
 * This field has not had a description added.
 * @member {Object} data
 */
CollectionItem.prototype['data'] = undefined;






export default CollectionItem;

