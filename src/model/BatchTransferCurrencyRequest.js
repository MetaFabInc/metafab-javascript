/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BatchTransferCurrencyRequest model module.
 * @module model/BatchTransferCurrencyRequest
 * @version 1.5.1
 */
class BatchTransferCurrencyRequest {
    /**
     * Constructs a new <code>BatchTransferCurrencyRequest</code>.
     * @alias module:model/BatchTransferCurrencyRequest
     * @param amounts {Array.<Number>} An array of currency amounts to transfer. Ordering corresponds to the ordering of provided `addresses` and/or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.
     */
    constructor(amounts) { 
        
        BatchTransferCurrencyRequest.initialize(this, amounts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amounts) { 
        obj['amounts'] = amounts;
    }

    /**
     * Constructs a <code>BatchTransferCurrencyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchTransferCurrencyRequest} obj Optional instance to populate.
     * @return {module:model/BatchTransferCurrencyRequest} The populated <code>BatchTransferCurrencyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchTransferCurrencyRequest();

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], ['String']);
            }
            if (data.hasOwnProperty('walletIds')) {
                obj['walletIds'] = ApiClient.convertToType(data['walletIds'], ['String']);
            }
            if (data.hasOwnProperty('amounts')) {
                obj['amounts'] = ApiClient.convertToType(data['amounts'], ['Number']);
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchTransferCurrencyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchTransferCurrencyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchTransferCurrencyRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addresses'])) {
            throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['walletIds'])) {
            throw new Error("Expected the field `walletIds` to be an array in the JSON data but got " + data['walletIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['amounts'])) {
            throw new Error("Expected the field `amounts` to be an array in the JSON data but got " + data['amounts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['references'])) {
            throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
        }

        return true;
    }


}

BatchTransferCurrencyRequest.RequiredProperties = ["amounts"];

/**
 * An array of valid EVM based addresses to transfer currency to.
 * @member {Array.<String>} addresses
 */
BatchTransferCurrencyRequest.prototype['addresses'] = undefined;

/**
 * An array of wallet ids within the MetaFab ecosystem to transfer currency to.
 * @member {Array.<String>} walletIds
 */
BatchTransferCurrencyRequest.prototype['walletIds'] = undefined;

/**
 * An array of currency amounts to transfer. Ordering corresponds to the ordering of provided `addresses` and/or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.
 * @member {Array.<Number>} amounts
 */
BatchTransferCurrencyRequest.prototype['amounts'] = undefined;

/**
 * An optional array of uint256 numbers to reference each transfer in the batch. Ordering corresponds to the ordering of provided `addresses` or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.
 * @member {Array.<Number>} references
 */
BatchTransferCurrencyRequest.prototype['references'] = undefined;






export default BatchTransferCurrencyRequest;

