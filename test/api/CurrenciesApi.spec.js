/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MetafabJavascript);
  }
}(this, function(expect, MetafabJavascript) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MetafabJavascript.CurrenciesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CurrenciesApi', function() {
    describe('batchTransferCurrency', function() {
      it('should call batchTransferCurrency successfully', function(done) {
        //uncomment below and update the code to test batchTransferCurrency
        //instance.batchTransferCurrency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('burnCurrency', function() {
      it('should call burnCurrency successfully', function(done) {
        //uncomment below and update the code to test burnCurrency
        //instance.burnCurrency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCurrency', function() {
      it('should call createCurrency successfully', function(done) {
        //uncomment below and update the code to test createCurrency
        //instance.createCurrency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrencies', function() {
      it('should call getCurrencies successfully', function(done) {
        //uncomment below and update the code to test getCurrencies
        //instance.getCurrencies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrencyBalance', function() {
      it('should call getCurrencyBalance successfully', function(done) {
        //uncomment below and update the code to test getCurrencyBalance
        //instance.getCurrencyBalance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrencyFees', function() {
      it('should call getCurrencyFees successfully', function(done) {
        //uncomment below and update the code to test getCurrencyFees
        //instance.getCurrencyFees(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrencyRole', function() {
      it('should call getCurrencyRole successfully', function(done) {
        //uncomment below and update the code to test getCurrencyRole
        //instance.getCurrencyRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('grantCurrencyRole', function() {
      it('should call grantCurrencyRole successfully', function(done) {
        //uncomment below and update the code to test grantCurrencyRole
        //instance.grantCurrencyRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mintCurrency', function() {
      it('should call mintCurrency successfully', function(done) {
        //uncomment below and update the code to test mintCurrency
        //instance.mintCurrency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeCurrencyRole', function() {
      it('should call revokeCurrencyRole successfully', function(done) {
        //uncomment below and update the code to test revokeCurrencyRole
        //instance.revokeCurrencyRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setCurrencyFees', function() {
      it('should call setCurrencyFees successfully', function(done) {
        //uncomment below and update the code to test setCurrencyFees
        //instance.setCurrencyFees(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transferCurrency', function() {
      it('should call transferCurrency successfully', function(done) {
        //uncomment below and update the code to test transferCurrency
        //instance.transferCurrency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
